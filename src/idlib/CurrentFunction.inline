// Copyright Michael Heilmann 2016, 2017.
//
// This file is part of Idlib.
//
// Idlib is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Idlib is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Idlib. If not, see <http://www.gnu.org/licenses/>.

/// @file idlib/CurrentFunction.inline
/// @author Michael Heilmann
/// @brief Definitions of compile-time constants giving the current C/C++ file,
/// the C/C++ line and the current C/C++ function names. Either the resulting
/// macros are defined or not.

#pragma once

/// This should be used instead of <tt>__FILE__</tt>.
/// Evaluates to a static const C string of the current C/C++ source file.
#define __ID_CURRENT_FILE__ __FILE__
/// This should be used instead of <tt>__LINE__</tt>.
/// Evaluates to a static const integer of the current C/C++ source line.
#define __ID_CURRENT_LINE__ __LINE__

/// Get a proper define for __ID_CURRENT_FUNCTION__ iff possible.
/// This should work for C and C++.
/// Awkward name to minimize the change of any conflict.
inline void ________________current_function_helper________________()
{
    #if defined(__GNUC__) || (defined(__MWERKS__) && (__MWERKS__ >= 0x3000)) || (defined(__ICC) && (__ICC >= 600)) || defined(__ghs__)
        #define __ID_CURRENT_FUNCTION__ __PRETTY_FUNCTION__
    #elif defined(__DMC__) && (__DMC__ >= 0x810)
        #define __ID_CURRENT_FUNCTION__ __PRETTY_FUNCTION__
    #elif defined(__FUNCSIG__)
        #define __ID_CURRENT_FUNCTION__ __FUNCSIG__
    #elif (defined(__INTEL_COMPILER) && (__INTEL_COMPILER >= 600)) || (defined(__IBMCPP__) && (__IBMCPP__ >= 500))
        #define __ID_CURRENT_FUNCTION__ __FUNCTION__
    #elif defined(__BORLANDC__) && (__BORLANDC__ >= 0x550)
        #define __ID_CURRENT_FUNCTION__ __FUNC__
    #elif defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901)
        #define __ID_CURRENT_FUNCTION__ __func__
    #elif defined(__cplusplus) && (__cplusplus >= 201103)
        #define __ID_CURRENT_FUNCTION__ __func__
    #elif defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L)
		#define __ID_CURRENT_FUNCTION__ __func__
    #else 
        /*#define __ID_CURRENT_FUNCTION__ "(unknown)"*/ /* Do not define __ID_CURRENT_FUNCTION__ macro here. */
    #endif
}
